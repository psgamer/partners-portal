rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // refuse all unspecified by default
      allow read, write: if false;
    }

  	function isAuthorized() {
      return request.auth.uid != null;
    }
  	function currentDoc() {
      return resource.data;
    }
  	function futureDoc() {
      return request.resource.data;
    }
  	function diffMap() {
      return futureDoc().diff(currentDoc());
    }

    match /local-solutions/{localSolutionId} {
    	allow read: if isAuthorized();
    }
    match /users/{userId} {
      function isCurrentUser() {
        return request.auth.uid == userId;
      }

      match /user-notifications/{notificationId} {
        function isReadChangedOnly() {
          return diffMap().affectedKeys().hasOnly(['isRead'])
            && futureDoc().isRead != null
            && futureDoc().isRead != currentDoc().isRead;
        }

        allow read: if isCurrentUser();
        allow update: if isCurrentUser() && isReadChangedOnly();
        allow delete: if isCurrentUser();
      }

      match /user-notifications-metadata/{metadataId} {
        allow read: if isCurrentUser();
      }
    }
    match /order-amount-ranges/{rangeId} {
    	allow read: if isAuthorized();
    }
    match /contractors/{contractorId} {
      function isCurrentUserContractor() {
        return request.auth.token.contractorId == contractorId;
      }
      function isCurrentUserContractorsDistributor() {
        let currentUserContractorId = request.auth.token.contractorId;

        return contractorId in get(/databases/$(database)/documents/contractors/$(currentUserContractorId)/contractor-distributors/$(currentUserContractorId)).data.distributorIds;
      }

      allow read: if isAuthorized() && (isCurrentUserContractor() || isCurrentUserContractorsDistributor());

      match /contractor-distributors/{contractorDistributorId} {
      	allow read: if isAuthorized() && isCurrentUserContractor();
      }
      match /payers/{payerId} {
      	allow read: if isAuthorized() && (isCurrentUserContractor() || isCurrentUserContractorsDistributor());
      }
      match /contractor-clients/{contractorClientId} {
        allow read: if isAuthorized() && isCurrentUserContractor();
      }
      match /contractor-licenses/{contractorLicenseId} {
        allow read: if isAuthorized() && isCurrentUserContractor();
      }
      match /orders/{orderId} {
        function isValidCancelOperation() {
          return diffMap().affectedKeys().hasOnly(['status','hasPendingChanges'])
            && futureDoc().status == 'CANCELLED'
            && currentDoc().status in ['NEW', 'PENDING']
            && futureDoc().hasPendingChanges;
        }
        function isValidDeleteOperation() {
          return currentDoc().status == 'NEW';
        }
        function isValidLocalSolutionSrcLicenseByDb() {
          let futureLocalSolutionSrc = futureDoc().localSolutionSrc;
          let localSolution = get(/databases/$(database)/documents/licenses/$(futureDoc().licenseId)).data.localSolution;

          return localSolution.id == futureLocalSolutionSrc.id
              && localSolution.count == futureLocalSolutionSrc.count
        }
        function isValidResultingOrder() {
          return futureDoc().keys().hasAll(['status',
                                            'amountTotal',
                                            'operation',
                                            'createdDate',
                                            'localSolutionRes',
                                            'client',
                                            'contact',
                                            'contractor',
                                            'distributor',
                                            'contractorPayer',
                                            'distributorPayer',
                                            'licenseId',
                                            'localSolutionSrc'])
                              && futureDoc().contractor.keys().hasAll(['id','name'])
                              && futureDoc().distributor.keys().hasAll(['id','name'])
                              && futureDoc().contractorPayer.keys().hasAll(['id','name'])
                              && futureDoc().distributorPayer.keys().hasAll(['id','name'])
                              && futureDoc().localSolutionRes.keys().hasAll(['id','name','count','period'])
                              && futureDoc().localSolutionRes.period.keys().hasAll(['count','type'])
                              && futureDoc().client.keys().hasAll(['taxCode','name'])
                              && futureDoc().contact.keys().hasAll(['phone','name','email'])
                              && futureDoc().contractor.id == contractorId
                              && (
                                     (futureDoc().operation == 'NEW_PURCHASE'
                                      && futureDoc().licenseId == null
                                      && futureDoc().localSolutionSrc == null)
                                  ||
                                     (futureDoc().operation == 'PROLONGATION'
                                      && futureDoc().licenseId != null
                                      && futureDoc().localSolutionSrc != null
                                      && futureDoc().localSolutionSrc.keys().hasAll(['id','name','count','expirationDate'])
                                      && isValidLocalSolutionSrcLicenseByDb())
                              )
                              && futureDoc().distributor.id in get(/databases/$(database)/documents/contractors/$(contractorId)/contractor-distributors/$(contractorId)).data.distributorIds
                              && exists(/databases/$(database)/documents/contractors/$(contractorId)/payers/$(futureDoc().contractorPayer.id))
                              && exists(/databases/$(database)/documents/contractors/$(futureDoc().distributor.id)/payers/$(futureDoc().distributorPayer.id))
                              && exists(/databases/$(database)/documents/local-solutions/$(futureDoc().localSolutionRes.id));
        }
        function isValidCreateOperation() {
          return futureDoc().keys().hasOnly(['contractor',
                                             'distributor',
                                             'contractorPayer',
                                             'distributorPayer',
                                             'licenseId',
                                             'amountTotal',
                                             'operation',
                                             'status',
                                             'createdDate',
                                             'localSolutionSrc',
                                             'localSolutionRes',
                                             'client',
                                             'contact',
                                             'hasPendingChanges'])
                      && futureDoc().createdDate is timestamp
                      && futureDoc().status == 'NEW'
                      && futureDoc().hasPendingChanges
                      && futureDoc().client.keys().hasOnly(['taxCode','name']);
        }
        function isValidUpdateOperation() {
          return diffMap().affectedKeys().hasOnly(['distributor',
                                                   'contractorPayer',
                                                   'distributorPayer',
                                                   'licenseId',
                                                   'amountTotal',
                                                   'operation',
                                                   'localSolutionSrc',
                                                   'localSolutionRes',
                                                   'client',
                                                   'contact',
                                                   'hasPendingChanges'])
                      && currentDoc().status == 'NEW'
                      && futureDoc().hasPendingChanges
                      && (futureDoc().client.id == null || futureDoc().client.id == currentDoc().client.id);
        }

      	allow read: if isAuthorized() && isCurrentUserContractor();
        allow create: if isAuthorized() && isCurrentUserContractor() && isValidCreateOperation() && isValidResultingOrder();
        allow update: if isAuthorized() && isCurrentUserContractor() && (isValidCancelOperation() || (isValidUpdateOperation() && isValidResultingOrder()));
        allow delete: if isAuthorized() && isCurrentUserContractor() && isValidDeleteOperation();
      }
    }
  }
}
