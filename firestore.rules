rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      // refuse all unspecified by default
      allow read, write: if false;
    }

  	function isAuthorized() {
      return request.auth.uid != null;
    }
  	function currentDoc() {
      return resource.data;
    }
  	function futureDoc() {
      return request.resource.data;
    }
  	function diffMap() {
      return futureDoc().diff(currentDoc());
    }

    match /clients/{clientId} {
    	allow read: if isAuthorized() && request.auth.token.contractorId in currentDoc().contractorIds;
    }
    match /local-solutions/{localSolutionId} {
    	allow read: if isAuthorized();
    }
    match /order-amount-ranges/{rangeId} {
    	allow read: if true;
    }
    match /contractors/{contractorId} {
      function isCurrentUserContractor() {
        return isAuthorized() && request.auth.token.contractorId == contractorId;
      }
      function isCurrentUserContractorsDistributor() {
        return isAuthorized() && request.auth.token.contractorId in currentDoc().contractorIds;
      }

      allow read: if isAuthorized() && (isCurrentUserContractor() || isCurrentUserContractorsDistributor());

      match /payers/{payerId} {
        function isCurrentUserPayerContractorsDistributor() {
          return isAuthorized() && request.auth.token.contractorId in get(/databases/$(database)/documents/contractors/$(contractorId)).data.contractorIds;
        }

      	allow read: if isAuthorized() && (isCurrentUserContractor() || isCurrentUserPayerContractorsDistributor());
      }
      match /orders/{orderId} {
        function isValidCancelOperation() {
          return diffMap().affectedKeys().hasOnly(['status'])
            && futureDoc().status == 'CANCELLED'
            && currentDoc().status in ['NEW', 'PENDING'];
        }
        function isValidDeleteOperation() {
          return currentDoc().status == 'NEW';
        }
        function isValidLocalSolutionSrcLicenseByDbForCreate() {
          let futureLocalSolutionSrc = futureDoc().localSolutionSrc;
          let localSolution = get(/databases/$(database)/documents/licenses/$(futureDoc().licenseId)).data.localSolution;

          return localSolution.id == futureLocalSolutionSrc.id
              && localSolution.count == futureLocalSolutionSrc.count
        }
        function isValidCreateOperation() {
          return futureDoc().keys().hasAll(['status','amountTotal','operation','createdDate','localSolutionRes','client','contact','contractor','distributor','contractorPayer','distributorPayer','licenseId','localSolutionSrc'])
                    && futureDoc().contractor.keys().hasAll(['id','name'])
                    && futureDoc().distributor.keys().hasAll(['id','name'])
                    && futureDoc().contractorPayer.keys().hasAll(['id','name'])
                    && futureDoc().distributorPayer.keys().hasAll(['id','name'])
                    && futureDoc().localSolutionRes.keys().hasAll(['id','name','count','period'])
                    && futureDoc().localSolutionRes.period.keys().hasAll(['count','type'])
                    && futureDoc().client.keys().hasAll(['taxCode','name'])
                    && futureDoc().contact.keys().hasAll(['phone','name','email'])
                    && futureDoc().status == 'NEW'
                    && futureDoc().contractor.id == contractorId
                    && (
                           (futureDoc().operation == 'NEW_PURCHASE'
                            && futureDoc().licenseId == null
                            && futureDoc().localSolutionSrc == null)
                        ||
                           (futureDoc().operation == 'PROLONGATION'
                            && futureDoc().licenseId != null
                            && futureDoc().localSolutionSrc != null
                            && futureDoc().localSolutionSrc.keys().hasAll(['id','name','count','expirationDate'])
                            && isValidLocalSolutionSrcLicenseByDbForCreate())
                    )
                    && contractorId in get(/databases/$(database)/documents/contractors/$(futureDoc().distributor.id)).data.contractorIds
                    && exists(/databases/$(database)/documents/contractors/$(contractorId)/payers/$(futureDoc().contractorPayer.id))
                    && exists(/databases/$(database)/documents/contractors/$(futureDoc().distributor.id)/payers/$(futureDoc().distributorPayer.id))
                    && exists(/databases/$(database)/documents/local-solutions/$(futureDoc().localSolutionRes.id));
        }
        function isValidUpdateOperation() {
          return false;
        }

      	allow read: if isAuthorized() && isCurrentUserContractor();
        allow create: if isAuthorized() && isCurrentUserContractor() && isValidCreateOperation();
        allow update: if isAuthorized() && isCurrentUserContractor() && (isValidCancelOperation() || isValidUpdateOperation());
        allow delete: if isAuthorized() && isCurrentUserContractor() && isValidDeleteOperation();
      }
    }
  }
}
